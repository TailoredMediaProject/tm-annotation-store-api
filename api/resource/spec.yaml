openapi: 3.0.3
info:
  title: Resource Store API
  version: 2.0.32
servers:
  - url: http://localhost:4000/resources/
    description: Local Developerment Server
paths:
  /annotations:
    get:
      operationId: listAnnotations
      summary: List all annotations
      tags:
        - Annotation
      parameters:
        - $ref: '#/components/parameters/IdFilter'
        - $ref: '#/components/parameters/TargetFilter'
        - $ref: '#/components/parameters/AssetUris'
      responses:
        default:
          $ref: '#/components/responses/AnnotationListResponse'
    post:
      operationId: Create Annotations
      summary: Post one or multiple Annotations
      tags:
        - Annotation
      requestBody:
        $ref: '#/components/requestBodies/AnnotationRequestBody'
      responses:
        default:
          $ref: '#/components/responses/IdResponse'
  /annotations/{annotationId}:
    get:
      operationId: getAnnotation
      summary: Get specific annotation
      tags:
        - Annotation
      parameters:
        - $ref: '#/components/parameters/AnnotationId'
      responses:
        default:
          $ref: '#/components/responses/AnnotationResponse'
  /docs/texts:
    get:
      tags:
        - Text Documents
      summary: return a list of existing text documents
      operationId: listTextDocuments
      responses:
        '200':
          $ref: '#/components/responses/TextDocListResponse'
    post:
      tags:
        - Text Documents
      summary: create a single text document
      operationId: createTextDocument
      requestBody:
        $ref: '#/components/requestBodies/TextDocRequest'
      responses:
        '201':
          $ref: '#/components/responses/TextDocResponse'
        '400':
          description: bad request
  /docs/texts/{id}:
    get:
      tags:
        - Text Documents
      summary: return a single text document matching the id
      operationId: getTextDocument
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/TextDocResponse'
        '404':
          description: not found
    delete:
      tags:
        - Text Documents
      summary: delete a single text document matching the id
      operationId: deleteTextDocument
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: deleted
        '404':
          description: not found
components:
  schemas:
    JsonLdResponse:
      description: a jsonld response
      type: object
      example:
        '@context': http://tmp.org/resources/context/annotation.jsonld
        id: http://tmp.org/resources/annotations/123
        type: http://www.w3.org/ns/oa#Annotation
        body:
          type: 'http://www.w3.org/ns/oa#TextualBody'
          value: 'Mick Schumacher'
    TextDocRequest:
      description: a text document
      type: object
      properties:
        title:
          type: string
          example: My Textdocument
        content:
          type: string
          example: This is the text content of a document
    TextDocResponse:
      description: a stored text document
      type: object
      properties:
        id:
          type: string
          example: 1a2b3c4d
        title:
          type: string
          example: My Textdocument
        content:
          type: string
          example: This is the text content of a document
        statistics:
          $ref: '#/components/schemas/TextDocStatistics'

    TextDocStatistics:
      description: some statistics like annotation counts
      type: object
      properties:
        annotationCount:
          type: object
          properties:
            document:
              type: number
              example: 2
            documentPart:
              type: number
              example: 3
    AnyValue:
      description: Can be any value, including `null`
      nullable: true
    Id:
      type: string
    DateTime:
      type: string
      format: date-time
      example: "2021-11-29T16:02:17.123Z"
    OriginType:
      description: ''
      type: string
      enum:
        - ingest
        - linking
        - manual
    Origin:
      description: 'The origin'
      type: object
      required:
        - type
        - creator
      properties:
        type:
          $ref: '#/components/schemas/OriginType'
        creator:
          type: string
          nullable: false
    BodyType:
      description: 'Specifies the unique body subclass'
      type: string
      enum:
        - MetaDataBody
        - ResourceBody
        - TextBody
        - PartBody
    Body:
      description: 'Base class of a body'
      type: object
      required:
        - id
        - confidence
        - type
      discriminator:
        propertyName: type
      properties:
        id:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1
        type:
          $ref: '#/components/schemas/BodyType'
    TextBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
          required:
            - value
          properties:
            value:
              type: string
    MetaDataBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
          required:
            - relation
            - value
          properties:
            relation:
              type: string
              nullable: true
            value:
              $ref: '#/components/schemas/AnyValue'
    ResourceBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
          required:
            - relation
            - value
          properties:
            relation:
              type: string
            value:
              type: string
    PartBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
    TargetType:
      description: ''
      type: string
      enum:
        - TargetResource
        - FragmentResource
    Target:
      description: ''
      type: object
      required:
        - source
        - type
      discriminator:
        propertyName: type
      properties:
        source:
          type: string
        type:
          $ref: '#/components/schemas/TargetType'
    TargetResource:
      allOf:
        - $ref: '#/components/schemas/Target'
        - type: object
    FragmentResource:
      allOf:
        - $ref: '#/components/schemas/Target'
        - type: object
          required:
            - selector
          properties:
            selector:
              $ref: '#/components/schemas/Selector'
    SelectorType:
      description: ''
      type: string
      enum:
        - TextPositionSelector
        - TextQuoteSelector
        - MediaFragmentSelector
        - TemporalFragmentSelector
        - PercentSpatialSelector
    Selector:
      description: ''
      type: object
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/SelectorType'
    TextPositionSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - start
            - end
          properties:
            start:
              type: number
            end:
              type: number
    TextQuoteSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - exact
            - prefix
            - suffix
          properties:
            exact:
              type: string
            prefix:
              type: string
            suffix:
              type: string
    TemporalFragmentSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - start
            - end
          properties:
            start:
              type: number
            end:
              type: number
    PercentSpatialSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - x
            - y
            - w
            - h
          properties:
            x:
              type: number
            y:
              type: number
            w:
              type: number
            h:
              type: number
    MediaFragmentSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          properties:
            temporal:
              $ref: '#/components/schemas/TemporalFragmentSelector'
            spatial:
              $ref: '#/components/schemas/PercentSpatialSelector'
    Annotation:
      description: ''
      type: object
      required:
        - id
        - origin
        - created
        - body
        - target
      properties:
        id:
          type: string
          nullable: false
        origin:
          $ref: '#/components/schemas/Origin'
        replaces:
          type: string
        replacedBy:
          type: string
        created:
          readOnly: true
          $ref: '#/components/schemas/DateTime'
        body:
          type: array
          items:
            $ref: '#/components/schemas/Body'
        target:
          type: array
          items:
            $ref: '#/components/schemas/Target'
  responses:
    AnnotationResponse:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Annotation'
    AnnotationListResponse:
      description: ''
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
    IdResponse:
      description: 'The ID returned as sole id or as dictionary where the key is the old key and the value is the new key'
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: string
    JsonLdResponse:
      description: a jsonld response
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/JsonLdResponse'
    TextDocResponse:
      description: a stored text document
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/TextDocResponse'
    TextDocListResponse:
      description: a list of stored text documents
      content:
        application/json; charset=utf-8:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TextDocResponse'
  requestBodies:
    AnnotationRequestBody:
      description: 'Contains the Annotation to create, can be a single or or an array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
    TextDocRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TextDocRequest'
  parameters:
    Id:
      name: id
      in: path
      required: true
      description: The unique identifier of a resource
      schema:
        type: string
    AnnotationId:
      name: annotationId
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
    IdFilter:
      name: ids
      in: query
      schema:
        type: array
        items:
          type: string
    TargetFilter:
      description: Searches with one or more annotation IDs in target source
      name: targets
      in: query
      schema:
        type: array
        items:
          type: string
    AssetUris:
      name: assetUris
      in: query
      required: false
      allowEmptyValue: false
      schema:
        type: array
        items:
          type: string
          format: uri
