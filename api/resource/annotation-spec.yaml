openapi: 3.0.3
info:
  title: TailoredMedia Annotation Store
  description: TailoredMedia Annotation Store
  version: 1.0.0
servers:
  - url: 'http://localhost:4000/resources'
paths:
  /annotations:
    get:
      operationId: listAnnotations
      summary: List all annotations
      tags:
        - Annotation
      responses:
        default:
          $ref: '#/components/responses/AnnotationListResponse'
    post:
      operationId: Create Annotations
      summary: Post one or multiple Annotations
      tags:
        - Annotation
      requestBody:
        $ref: '#/components/requestBodies/AnnotationRequestBody'
      responses:
        default:
          $ref: '#/components/responses/IdResponse'
  /annotations/{annotationId}:
    get:
      operationId: getAnnotation
      summary: Get specific annotation
      tags:
        - Annotation
      parameters:
        - $ref: '#/components/parameters/AnnotationId'
      responses:
        default:
          $ref: '#/components/responses/AnnotationResponse'
tags:
  - name: Annotation
    description: ''
components:
  schemas:
    AnyValue:
      description: Can be any value, including `null`
      nullable: true
    Id:
      type: string
    DateTime:
      type: string
      format: date-time
      example: "2021-11-29T16:02:17.123Z"
    OriginType:
      description: ''
      type: string
      enum:
        - ingest
        - linking
        - manual
    Origin:
      description: 'The origin'
      type: object
      required:
        - type
        - creator
      properties:
        type:
          $ref: '#/components/schemas/OriginType'
        creator:
          type: string
          nullable: false
    BodyType:
      description: 'Specifies the unique body subclass'
      type: string
      enum:
        - MetadataBody
        - ResourceBody
        - TextBody
        - PartBody
    Body:
      description: 'Base class of a body'
      type: object
      required:
        - id
        - confidence
        - type
      discriminator:
        propertyName: type
      properties:
        id:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1
        type:
          $ref: '#/components/schemas/BodyType'
    TextBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
          required:
            - value
          properties:
            value:
              type: string
    MetadataBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
          required:
            - relation
            - value
          properties:
            relation:
              type: string
              nullable: true
            value:
              $ref: '#/components/schemas/AnyValue'
    ResourceBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
          required:
            - relation
            - value
          properties:
            relation:
              type: string
            value:
              type: string
    PartBody:
      description: ''
      allOf:
        - $ref: '#/components/schemas/Body'
        - type: object
    TargetType:
      description: ''
      type: string
      enum:
        - TargetResource
        - FragmentResource
    Target:
      description: ''
      type: object
      required:
        - source
        - type
      discriminator:
        propertyName: type
      properties:
        source:
          type: string
        type:
          $ref: '#/components/schemas/TargetType'
    TargetResource:
      allOf:
        - $ref: '#/components/schemas/Target'
        - type: object
    FragmentResource:
      allOf:
        - $ref: '#/components/schemas/Target'
        - type: object
          required:
            - selector
          properties:
            selector:
              $ref: '#/components/schemas/Selector'
    SelectorType:
      description: ''
      type: string
      enum:
        - TextPositionSelector
        - TextQuoteSelector
        - MediaFragmentSelector
        - TemporalFragmentSelector
        - PercentSpatialSelector
    Selector:
      description: ''
      type: object
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/SelectorType'
    TextPositionSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - start
            - end
          properties:
            start:
              type: number
            end:
              type: number
    TextQuoteSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - exact
            - prefix
            - suffix
          properties:
            exact:
              type: string
            prefix:
              type: string
            suffix:
              type: string
    TemporalFragmentSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - start
            - end
          properties:
            start:
              type: number
            end:
              type: number
    PercentSpatialSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          required:
            - x
            - y
            - w
            - h
          properties:
            x:
              type: number
            y:
              type: number
            w:
              type: number
            h:
              type: number
    MediaFragmentSelector:
      allOf:
        - $ref: '#/components/schemas/Selector'
        - type: object
          properties:
            temporal:
              $ref: '#/components/schemas/TemporalFragmentSelector'
            spatial:
              $ref: '#/components/schemas/PercentSpatialSelector'
    Annotation:
      description: ''
      type: object
      required:
        - id
        - origin
        - created
        - body
        - target
      properties:
        id:
          type: string
          nullable: false
        origin:
          $ref: '#/components/schemas/Origin'
        replaces:
          type: string
        replacedBy:
          type: string
        created:
          readOnly: true
          $ref: '#/components/schemas/DateTime'
        body:
          type: array
          items:
            $ref: '#/components/schemas/Body'
        target:
            type: array
            items:
              $ref: '#/components/schemas/Target'
  parameters:
    AnnotationId:
      name: annotationId
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
  requestBodies:
    AnnotationRequestBody:
      description: 'Contains the Annotation to create, can be a single or or an array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
  responses:
    AnnotationResponse:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Annotation'
    AnnotationListResponse:
      description: ''
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
    IdResponse:
      description: 'The ID returned as sole id or as dictionary where the key is the old key and the value is the new key'
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Annotation'
